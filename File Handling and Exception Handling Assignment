#File Read & Write Challenge


def process_file(input_filename, output_filename):
    """
    Reads content from one file, converts it to uppercase,
    and writes the modified content to a new file.
    """
    try:
        # Step 1: Read the content from the input file
        with open(input_filename, 'r') as infile:
            content = infile.read()

        # Step 2: Modify the content (convert to uppercase)
        modified_content = content.upper()

        # Step 3: Write the modified content to the output file
        with open(output_filename, 'w') as outfile:
            outfile.write(modified_content)

        print(f"Successfully processed '{input_filename}' and saved the result to '{output_filename}'.")

    except FileNotFoundError:
        print(f"Error: The file '{input_filename}' was not found.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# Example usage:
input_file = "original.txt"
output_file = "modified.txt"

# Create a sample file for demonstration
with open(input_file, 'w') as f:
    f.write("This is a test file.\n")
    f.write("It contains some text to be modified.")

# Run the function
process_file(input_file, output_file)


#Error Handling Lab

def read_and_print_file():
    """
    Prompts the user for a filename and handles errors
    if the file does not exist or cannot be read.
    """
    filename = input("Please enter the name of the file to read: ")
    
    try:
        # Open and read the file
        with open(filename, 'r') as file:
            content = file.read()
            print("\n--- File Content ---")
            print(content)
            print("--------------------\n")

    except FileNotFoundError:
        # This block runs if the file does not exist
        print(f"Error: The file '{filename}' was not found. Please check the file name and path.")
    except IOError:
        # This block runs for other I/O related errors (e.g., permissions)
        print(f"Error: Could not read the file '{filename}'. Check file permissions.")
    except Exception as e:
        # A general catch-all for any other unexpected errors
        print(f"An unexpected error occurred: {e}")

# Run the function to test
read_and_print_file()
